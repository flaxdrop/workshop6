<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="trafik_8cpp" kind="file" language="C++">
    <compoundname>trafik.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">thread</includes>
    <includes local="no">chrono</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">ctime</includes>
    <includes local="no">atomic</includes>
    <includes local="no">mutex</includes>
    <includes local="no">condition_variable</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">queue</includes>
    <includes local="no">fstream</includes>
    <includes local="no">sstream</includes>
    <incdepgraph>
      <node id="1">
        <label>trafik.cpp</label>
        <link refid="trafik_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>atomic</label>
      </node>
      <node id="4">
        <label>chrono</label>
      </node>
      <node id="9">
        <label>condition_variable</label>
      </node>
      <node id="5">
        <label>cstdlib</label>
      </node>
      <node id="6">
        <label>ctime</label>
      </node>
      <node id="12">
        <label>fstream</label>
      </node>
      <node id="10">
        <label>iomanip</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>mutex</label>
      </node>
      <node id="11">
        <label>queue</label>
      </node>
      <node id="13">
        <label>sstream</label>
      </node>
      <node id="3">
        <label>thread</label>
      </node>
    </incdepgraph>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="trafik_8cpp_1a8a0899713c9746a41d73dbe6bc249b2b" prot="public" static="no" strong="yes">
        <type></type>
        <name>TrafficLightColor</name>
        <enumvalue id="trafik_8cpp_1a8a0899713c9746a41d73dbe6bc249b2ba9de0e5dd94e861317e74964bed179fa0" prot="public">
          <name>GREEN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="trafik_8cpp_1a8a0899713c9746a41d73dbe6bc249b2baa2d9547b5d3dd9f05984475f7c926da0" prot="public">
          <name>RED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="trafik_8cpp_1a8a0899713c9746a41d73dbe6bc249b2ba8a568e5f41b7e4da88fe5c4a00aad34e" prot="public">
          <name>YELLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum class för att hålla koll på vilken färg som lyser i trafikljuset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="trafik.cpp" line="28" column="1" bodyfile="trafik.cpp" bodystart="29" bodyend="33"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="trafik_8cpp_1a51af509e376f73f98d8a0db2df49bd35" prot="public" static="no" mutable="no">
        <type>std::queue&lt; bool &gt;</type>
        <definition>std::queue&lt;bool&gt; pushbutton</definition>
        <argsstring></argsstring>
        <name>pushbutton</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="trafik.cpp" line="41" column="12" bodyfile="trafik.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trafik_8cpp_1ad5e0dbd36f0d71fce9b00b7f991b2f38" prot="public" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex mtx</definition>
        <argsstring></argsstring>
        <name>mtx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="trafik.cpp" line="43" column="12" bodyfile="trafik.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trafik_8cpp_1a0afa02d14fff34c480aabfbc41ad193c" prot="public" static="no" mutable="no">
        <type>std::condition_variable</type>
        <definition>std::condition_variable cv</definition>
        <argsstring></argsstring>
        <name>cv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="trafik.cpp" line="44" column="25" bodyfile="trafik.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trafik_8cpp_1a1ed4e2e604e59227624ba22c4161bc64" prot="public" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex logMutex</definition>
        <argsstring></argsstring>
        <name>logMutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="trafik.cpp" line="104" column="12" bodyfile="trafik.cpp" bodystart="104" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="trafik_8cpp_1a7138acdcadf1222850e28efaede4e8d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::atomic&lt; <ref refid="trafik_8cpp_1a8a0899713c9746a41d73dbe6bc249b2b" kindref="member">TrafficLightColor</ref> &gt;</type>
        <definition>std::atomic&lt; TrafficLightColor &gt; currentState</definition>
        <argsstring>(TrafficLightColor::RED)</argsstring>
        <name>currentState</name>
        <param>
          <type>TrafficLightColor::RED</type>
        </param>
        <briefdescription>
<para>std::atomic&lt;TrafficLightColor&gt; som håller koll på vilken färg som lyser i trafikljuset. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::atomic&lt;TrafficLightColor&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="trafik.cpp" line="40" column="13" declfile="trafik.cpp" declline="40" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="trafik_8cpp_1ad1f86724914ce132c1c339e46dd7c919" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt; bool &gt; exitprogram</definition>
        <argsstring>(false)</argsstring>
        <name>exitprogram</name>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="trafik.cpp" line="42" column="13" declfile="trafik.cpp" declline="42" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="trafik_8cpp_1aa6ea47e8c68f87e27e1de736de58275b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trafficLightController</definition>
        <argsstring>(int greenTime, int redTime, int yellowTime, int extendedRedTime)</argsstring>
        <name>trafficLightController</name>
        <param>
          <type>int</type>
          <declname>greenTime</declname>
        </param>
        <param>
          <type>int</type>
          <declname>redTime</declname>
        </param>
        <param>
          <type>int</type>
          <declname>yellowTime</declname>
        </param>
        <param>
          <type>int</type>
          <declname>extendedRedTime</declname>
        </param>
        <briefdescription>
<para>Traffic Light Controller Här är där all magi händer. Funktionen som flippar mellan färgerna, tar emot pushbutton kön och ändrar färgerna därefter. Här har vi använt oss av logstate funktionen som vi skrev för varje output, samt condition_variable och mutex för att se till Att det inte uppstår race condition mellan trådarna. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>greenTime</parametername>
</parameternamelist>
<parameterdescription>
<para>tid för grönt ljus </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>redTime</parametername>
</parameternamelist>
<parameterdescription>
<para>tid för rött ljus </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yellowTime</parametername>
</parameternamelist>
<parameterdescription>
<para>tid för gult ljus </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extendedRedTime</parametername>
</parameternamelist>
<parameterdescription>
<para>förlängd tid för röd ljus </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="trafik.cpp" line="141" column="6" bodyfile="trafik.cpp" bodystart="141" bodyend="180" declfile="trafik.cpp" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="trafik_8cpp_1ae58f973227bed2ce6a22eb4a13f76c32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void userInput</definition>
        <argsstring>()</argsstring>
        <name>userInput</name>
        <briefdescription>
<para>User input som kollar om q trycks så avslutar programmet, om p trycks så gör det att fotgängaren kan gå över övergångstället. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="trafik.cpp" line="76" column="6" bodyfile="trafik.cpp" bodystart="76" bodyend="101" declfile="trafik.cpp" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="trafik_8cpp_1aab6fb83bec11fa4da6515056eb467835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logState</definition>
        <argsstring>(const std::string &amp;event)</argsstring>
        <name>logState</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Funktion som printar ut system_clock till terminalen för att hålla koll, samt loggar detta till en textfile för att spara informationen. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>eventet som skall loggas </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="trafik.cpp" line="112" column="6" bodyfile="trafik.cpp" bodystart="112" bodyend="128" declfile="trafik.cpp" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="trafik_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
<para>Main funktionen som innehåller config för ljusens tider, 2 threads med ljusen på en, och userinput på den andra. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int Returnerar 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="trafik.cpp" line="54" column="5" bodyfile="trafik.cpp" bodystart="54" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="trafik_8cpp_1abca74b85af902a109a319718c4f89fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ofstream</type>
        <definition>std::ofstream logFile</definition>
        <argsstring>(&quot;traffic_light_log.txt&quot;, std::ios_base::app)</argsstring>
        <name>logFile</name>
        <param>
          <type>&quot;traffic_light_log.txt&quot;</type>
        </param>
        <param>
          <type>std::ios_base::app</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="trafik.cpp" line="103" column="15" declfile="trafik.cpp" declline="103" declcolumn="15"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>your name (<ulink url="mailto:you@domain.com">you@domain.com</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2025-01-23</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2025 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;condition_variable&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="trafik_8cpp_1a8a0899713c9746a41d73dbe6bc249b2b" kindref="member">TrafficLightColor</ref></highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>GREEN,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>RED,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>YELLOW</highlight></codeline>
<codeline lineno="33"><highlight class="normal">};</highlight></codeline>
<codeline lineno="40"><highlight class="normal">std::atomic&lt;TrafficLightColor&gt;<sp/><ref refid="trafik_8cpp_1a7138acdcadf1222850e28efaede4e8d3" kindref="member">currentState</ref>(TrafficLightColor::RED);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">std::queue&lt;bool&gt;<sp/>pushbutton;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">std::atomic&lt;bool&gt;<sp/>exitprogram(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">std::mutex<sp/>mtx;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">std::condition_variable<sp/>cv;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trafik_8cpp_1aa6ea47e8c68f87e27e1de736de58275b" kindref="member">trafficLightController</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>greenTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>redTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yellowTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>extendedRedTime);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trafik_8cpp_1ae58f973227bed2ce6a22eb4a13f76c32" kindref="member">userInput</ref>();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trafik_8cpp_1aab6fb83bec11fa4da6515056eb467835" kindref="member">logState</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;event);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="trafik_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>greenTime<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>redTime<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yellowTime<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>extendedRedTime<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread<sp/>userInputThread(<ref refid="trafik_8cpp_1ae58f973227bed2ce6a22eb4a13f76c32" kindref="member">userInput</ref>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread<sp/>trafficLightControllerThread(<ref refid="trafik_8cpp_1aa6ea47e8c68f87e27e1de736de58275b" kindref="member">trafficLightController</ref>,<sp/>greenTime,<sp/>redTime,<sp/>yellowTime,<sp/>extendedRedTime);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>userInputThread.join();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>trafficLightControllerThread.join();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trafik_8cpp_1ae58f973227bed2ce6a22eb4a13f76c32" kindref="member">userInput</ref>()</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!exitprogram)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>input;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cin<sp/>&gt;&gt;<sp/>input;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input<sp/>==<sp/></highlight><highlight class="charliteral">&apos;q&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exitprogram<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv.notify_all();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input<sp/>==<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(mtx);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushbutton.push(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trafik_8cpp_1aab6fb83bec11fa4da6515056eb467835" kindref="member">logState</ref>(</highlight><highlight class="stringliteral">&quot;Pedestrian<sp/>Button<sp/>Pushed,<sp/>wait<sp/>for<sp/>extended<sp/>red<sp/>signal.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv.notify_one();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>input&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">std::ofstream<sp/>logFile(</highlight><highlight class="stringliteral">&quot;traffic_light_log.txt&quot;</highlight><highlight class="normal">,<sp/>std::ios_base::app);</highlight></codeline>
<codeline lineno="104"><highlight class="normal">std::mutex<sp/>logMutex;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trafik_8cpp_1aab6fb83bec11fa4da6515056eb467835" kindref="member">logState</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;event)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>now<sp/>=<sp/>std::chrono::system_clock::now();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>now_c<sp/>=<sp/>std::chrono::system_clock::to_time_t(now);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::put_time(localtime(&amp;now_c),<sp/></highlight><highlight class="stringliteral">&quot;%T&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>event;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logEntry<sp/>=<sp/>oss.str();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>logEntry<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>guard(logMutex);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logFile.is_open())</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logFile<sp/>&lt;&lt;<sp/>logEntry<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trafik_8cpp_1aa6ea47e8c68f87e27e1de736de58275b" kindref="member">trafficLightController</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>greenTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>redTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yellowTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>extendedRedTime)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!exitprogram)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(mtx);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pushbutton.empty())</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushbutton.pop();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trafik_8cpp_1aab6fb83bec11fa4da6515056eb467835" kindref="member">logState</ref>(</highlight><highlight class="stringliteral">&quot;Traffic<sp/>Light:<sp/>Extended<sp/>Red<sp/>light<sp/>for<sp/>pedestrian&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv.wait_for(lock,<sp/>std::chrono::seconds(extendedRedTime));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trafik_8cpp_1a7138acdcadf1222850e28efaede4e8d3" kindref="member">currentState</ref><sp/>=<sp/>TrafficLightColor::YELLOW;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trafik_8cpp_1aab6fb83bec11fa4da6515056eb467835" kindref="member">logState</ref>(</highlight><highlight class="stringliteral">&quot;Traffic<sp/>Light:<sp/>Yellow&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv.wait_for(lock,<sp/>std::chrono::seconds(yellowTime));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pushbutton.empty())</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trafik_8cpp_1a7138acdcadf1222850e28efaede4e8d3" kindref="member">currentState</ref><sp/>=<sp/>TrafficLightColor::GREEN;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trafik_8cpp_1aab6fb83bec11fa4da6515056eb467835" kindref="member">logState</ref>(</highlight><highlight class="stringliteral">&quot;Traffic<sp/>Light:<sp/>Green&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv.wait_for(lock,<sp/>std::chrono::seconds(greenTime<sp/>-<sp/>3));</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trafik_8cpp_1a7138acdcadf1222850e28efaede4e8d3" kindref="member">currentState</ref><sp/>=<sp/>TrafficLightColor::GREEN;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trafik_8cpp_1aab6fb83bec11fa4da6515056eb467835" kindref="member">logState</ref>(</highlight><highlight class="stringliteral">&quot;Traffic<sp/>Light:<sp/>Green&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv.wait_for(lock,<sp/>std::chrono::seconds(greenTime));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trafik_8cpp_1a7138acdcadf1222850e28efaede4e8d3" kindref="member">currentState</ref><sp/>=<sp/>TrafficLightColor::YELLOW;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trafik_8cpp_1aab6fb83bec11fa4da6515056eb467835" kindref="member">logState</ref>(</highlight><highlight class="stringliteral">&quot;Traffic<sp/>Light:<sp/>Yellow&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv.wait_for(lock,<sp/>std::chrono::seconds(yellowTime));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trafik_8cpp_1a7138acdcadf1222850e28efaede4e8d3" kindref="member">currentState</ref><sp/>=<sp/>TrafficLightColor::RED;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trafik_8cpp_1aab6fb83bec11fa4da6515056eb467835" kindref="member">logState</ref>(</highlight><highlight class="stringliteral">&quot;Traffic<sp/>Light:<sp/>Red&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv.wait_for(lock,<sp/>std::chrono::seconds(redTime));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="trafik.cpp"/>
  </compounddef>
</doxygen>
